<?php
/**
 * Export ML Performance Report
 * Generates a comprehensive CSV report of ML model performance metrics
 */

require_once '../includes/auth.php';
require_once '../config/database.php';

$auth = new Auth();
$auth->requireAdmin();

$database = new Database();
$conn = $database->getConnection();

try {
    // Set headers for CSV download
    $filename = "ml_performance_report_" . date('Y-m-d_His') . ".csv";
    header('Content-Type: text/csv; charset=utf-8');
    header('Content-Disposition: attachment; filename="' . $filename . '"');
    header('Pragma: no-cache');
    header('Expires: 0');
    
    $output = fopen('php://output', 'w');
    
    // Add UTF-8 BOM for Excel compatibility
    fprintf($output, chr(0xEF).chr(0xBB).chr(0xBF));
    
    // ========================================
    // SECTION 1: REPORT HEADER
    // ========================================
    fputcsv($output, ['ML PERFORMANCE REPORT']);
    fputcsv($output, ['Barangay Kapasigan Resource Management System']);
    fputcsv($output, ['Generated:', date('F d, Y h:i A')]);
    fputcsv($output, ['Generated By:', $_SESSION['full_name']]);
    fputcsv($output, ['Report Period:', 'Last 30 Days']);
    fputcsv($output, []);
    
    // ========================================
    // SECTION 2: EXECUTIVE SUMMARY
    // ========================================
    fputcsv($output, ['=== EXECUTIVE SUMMARY ===']);
    fputcsv($output, []);
    
    // Get summary statistics
    $summary_query = "
        SELECT 
            COUNT(*) as total_predictions,
            AVG(confidence_score) as avg_confidence,
            MIN(confidence_score) as min_confidence,
            MAX(confidence_score) as max_confidence,
            SUM(CASE WHEN model_type = 'decision_tree' THEN 1 ELSE 0 END) as approval_predictions,
            SUM(CASE WHEN model_type = 'logistic_regression' THEN 1 ELSE 0 END) as noshow_predictions
        FROM ml_predictions
        WHERE created_at >= DATE_SUB(NOW(), INTERVAL 30 DAY)
    ";
    
    $stmt = $conn->prepare($summary_query);
    $stmt->execute();
    $summary = $stmt->fetch(PDO::FETCH_ASSOC);
    
    // Get booking statistics
    $booking_query = "
        SELECT 
            COUNT(*) as total_bookings,
            SUM(CASE WHEN status IN ('approved', 'completed') AND admin_notes LIKE '%Auto-approved%' THEN 1 ELSE 0 END) as auto_approved,
            SUM(CASE WHEN status IN ('approved', 'completed') THEN 1 ELSE 0 END) as total_approved,
            SUM(CASE WHEN status = 'denied' THEN 1 ELSE 0 END) as total_denied,
            SUM(CASE WHEN status = 'pending' THEN 1 ELSE 0 END) as total_pending
        FROM facility_bookings
        WHERE created_at >= DATE_SUB(NOW(), INTERVAL 30 DAY)
    ";
    
    $stmt = $conn->prepare($booking_query);
    $stmt->execute();
    $bookings = $stmt->fetch(PDO::FETCH_ASSOC);
    
    $auto_approval_rate = $bookings['total_approved'] > 0 
        ? ($bookings['auto_approved'] / $bookings['total_approved']) * 100 
        : 0;
    
    $time_saved_minutes = $bookings['auto_approved'] * 5; // 5 minutes per approval
    $time_saved_hours = round($time_saved_minutes / 60, 1);
    
    fputcsv($output, ['Metric', 'Value']);
    fputcsv($output, ['Total ML Predictions', number_format($summary['total_predictions'])]);
    fputcsv($output, ['Average Confidence Score', round($summary['avg_confidence'] * 100, 2) . '%']);
    fputcsv($output, ['Min Confidence Score', round($summary['min_confidence'] * 100, 2) . '%']);
    fputcsv($output, ['Max Confidence Score', round($summary['max_confidence'] * 100, 2) . '%']);
    fputcsv($output, []);
    fputcsv($output, ['Total Bookings', number_format($bookings['total_bookings'])]);
    fputcsv($output, ['Total Approved', number_format($bookings['total_approved'])]);
    fputcsv($output, ['Auto-Approved by ML', number_format($bookings['auto_approved'])]);
    fputcsv($output, ['Manual Approvals', number_format($bookings['total_approved'] - $bookings['auto_approved'])]);
    fputcsv($output, ['Denied', number_format($bookings['total_denied'])]);
    fputcsv($output, ['Pending Review', number_format($bookings['total_pending'])]);
    fputcsv($output, []);
    fputcsv($output, ['Auto-Approval Rate', round($auto_approval_rate, 2) . '%']);
    fputcsv($output, ['Time Saved (Minutes)', number_format($time_saved_minutes)]);
    fputcsv($output, ['Time Saved (Hours)', $time_saved_hours]);
    fputcsv($output, ['Time Saved (Days)', round($time_saved_hours / 8, 1)]);
    fputcsv($output, []);
    fputcsv($output, []);
    
    // ========================================
    // SECTION 3: DAILY PERFORMANCE METRICS
    // ========================================
    fputcsv($output, ['=== DAILY PERFORMANCE METRICS ===']);
    fputcsv($output, []);
    fputcsv($output, [
        'Date',
        'Total Bookings',
        'Approved',
        'Auto-Approved',
        'Manual Approved',
        'Denied',
        'Pending',
        'Auto-Approval Rate (%)',
        'Avg Confidence (%)'
    ]);
    
    $daily_query = "
        SELECT 
            DATE(fb.created_at) as date,
            COUNT(*) as total_bookings,
            SUM(CASE WHEN fb.status IN ('approved', 'completed') THEN 1 ELSE 0 END) as approved,
            SUM(CASE WHEN fb.status IN ('approved', 'completed') AND fb.admin_notes LIKE '%Auto-approved%' THEN 1 ELSE 0 END) as auto_approved,
            SUM(CASE WHEN fb.status = 'denied' THEN 1 ELSE 0 END) as denied,
            SUM(CASE WHEN fb.status = 'pending' THEN 1 ELSE 0 END) as pending
        FROM facility_bookings fb
        WHERE fb.created_at >= DATE_SUB(NOW(), INTERVAL 30 DAY)
        GROUP BY DATE(fb.created_at)
        ORDER BY date DESC
    ";
    
    $stmt = $conn->prepare($daily_query);
    $stmt->execute();
    $daily_data = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
    foreach ($daily_data as $day) {
        $manual_approved = $day['approved'] - $day['auto_approved'];
        $daily_auto_rate = $day['approved'] > 0 ? ($day['auto_approved'] / $day['approved']) * 100 : 0;
        
        // Get avg confidence for this day
        $conf_query = "SELECT AVG(confidence_score) as avg_conf FROM ml_predictions WHERE DATE(created_at) = :date";
        $conf_stmt = $conn->prepare($conf_query);
        $conf_stmt->bindParam(':date', $day['date']);
        $conf_stmt->execute();
        $conf = $conf_stmt->fetch(PDO::FETCH_ASSOC);
        $avg_confidence = $conf['avg_conf'] ? round($conf['avg_conf'] * 100, 2) : 0;
        
        fputcsv($output, [
            date('M d, Y', strtotime($day['date'])),
            $day['total_bookings'],
            $day['approved'],
            $day['auto_approved'],
            $manual_approved,
            $day['denied'],
            $day['pending'],
            round($daily_auto_rate, 2),
            $avg_confidence
        ]);
    }
    
    fputcsv($output, []);
    fputcsv($output, []);
    
    // ========================================
    // SECTION 4: MODEL ACCURACY ANALYSIS
    // ========================================
    fputcsv($output, ['=== MODEL ACCURACY ANALYSIS ===']);
    fputcsv($output, []);
    
    $accuracy_query = "
        SELECT 
            model_type,
            COUNT(*) as total_predictions,
            SUM(CASE WHEN actual_outcome IS NOT NULL THEN 1 ELSE 0 END) as predictions_with_outcome,
            SUM(CASE WHEN actual_outcome IS NOT NULL AND actual_outcome = JSON_UNQUOTE(JSON_EXTRACT(prediction_result, '$.prediction')) THEN 1 ELSE 0 END) as correct_predictions,
            AVG(confidence_score) as avg_confidence,
            MIN(confidence_score) as min_confidence,
            MAX(confidence_score) as max_confidence
        FROM ml_predictions
        WHERE created_at >= DATE_SUB(NOW(), INTERVAL 30 DAY)
        GROUP BY model_type
    ";
    
    $stmt = $conn->prepare($accuracy_query);
    $stmt->execute();
    $accuracy_data = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
    fputcsv($output, [
        'Model Type',
        'Total Predictions',
        'With Outcome',
        'Correct Predictions',
        'Accuracy Rate (%)',
        'Avg Confidence (%)',
        'Min Confidence (%)',
        'Max Confidence (%)'
    ]);
    
    foreach ($accuracy_data as $model) {
        $accuracy_rate = $model['predictions_with_outcome'] > 0 
            ? ($model['correct_predictions'] / $model['predictions_with_outcome']) * 100 
            : 0;
        
        $model_name = $model['model_type'] === 'decision_tree' 
            ? 'Decision Tree (Auto-Approval)' 
            : 'Logistic Regression (No-Show)';
        
        fputcsv($output, [
            $model_name,
            $model['total_predictions'],
            $model['predictions_with_outcome'],
            $model['correct_predictions'],
            round($accuracy_rate, 2),
            round($model['avg_confidence'] * 100, 2),
            round($model['min_confidence'] * 100, 2),
            round($model['max_confidence'] * 100, 2)
        ]);
    }
    
    fputcsv($output, []);
    fputcsv($output, []);
    
    // ========================================
    // SECTION 5: RESOURCE PERFORMANCE
    // ========================================
    fputcsv($output, ['=== RESOURCE PERFORMANCE (FACILITIES) ===']);
    fputcsv($output, []);
    
    $resource_query = "
        SELECT 
            f.id,
            f.name as facility_name,
            COUNT(fb.id) as total_bookings,
            SUM(CASE WHEN fb.status IN ('approved', 'completed') THEN 1 ELSE 0 END) as approved,
            SUM(CASE WHEN fb.status IN ('approved', 'completed') AND fb.admin_notes LIKE '%Auto-approved%' THEN 1 ELSE 0 END) as auto_approved,
            AVG(CASE WHEN fb.status = 'completed' THEN fb.satisfaction_rating ELSE NULL END) as avg_satisfaction,
            SUM(CASE WHEN fb.status = 'denied' THEN 1 ELSE 0 END) as denied,
            SUM(CASE WHEN fb.status = 'pending' THEN 1 ELSE 0 END) as pending
        FROM facilities f
        LEFT JOIN facility_bookings fb ON f.id = fb.facility_id 
            AND fb.created_at >= DATE_SUB(NOW(), INTERVAL 30 DAY)
        GROUP BY f.id, f.name
        ORDER BY total_bookings DESC
    ";
    
    $stmt = $conn->prepare($resource_query);
    $stmt->execute();
    $resources = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
    fputcsv($output, [
        'Facility ID',
        'Facility Name',
        'Total Bookings',
        'Approved',
        'Auto-Approved',
        'Manual Approved',
        'Denied',
        'Pending',
        'Auto-Approval Rate (%)',
        'Avg Satisfaction'
    ]);
    
    foreach ($resources as $resource) {
        if ($resource['total_bookings'] > 0) {
            $manual = $resource['approved'] - $resource['auto_approved'];
            $auto_rate = $resource['approved'] > 0 ? ($resource['auto_approved'] / $resource['approved']) * 100 : 0;
            $satisfaction = $resource['avg_satisfaction'] > 0 ? round($resource['avg_satisfaction'], 2) : 'N/A';
            
            fputcsv($output, [
                $resource['id'],
                $resource['facility_name'],
                $resource['total_bookings'],
                $resource['approved'],
                $resource['auto_approved'],
                $manual,
                $resource['denied'],
                $resource['pending'],
                round($auto_rate, 2),
                $satisfaction
            ]);
        }
    }
    
    fputcsv($output, []);
    fputcsv($output, []);
    
    // ========================================
    // SECTION 6: PEAK PERFORMANCE TIMES
    // ========================================
    fputcsv($output, ['=== PEAK PERFORMANCE TIMES (BY HOUR) ===']);
    fputcsv($output, []);
    
    $peak_query = "
        SELECT 
            HOUR(start_time) as hour,
            COUNT(*) as total_bookings,
            SUM(CASE WHEN status IN ('approved', 'completed') THEN 1 ELSE 0 END) as approved,
            SUM(CASE WHEN status IN ('approved', 'completed') AND admin_notes LIKE '%Auto-approved%' THEN 1 ELSE 0 END) as auto_approved
        FROM facility_bookings
        WHERE created_at >= DATE_SUB(NOW(), INTERVAL 30 DAY)
        GROUP BY HOUR(start_time)
        ORDER BY auto_approved DESC
    ";
    
    $stmt = $conn->prepare($peak_query);
    $stmt->execute();
    $peak_times = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
    fputcsv($output, [
        'Hour (24h)',
        'Total Bookings',
        'Approved',
        'Auto-Approved',
        'Auto-Approval Rate (%)'
    ]);
    
    foreach ($peak_times as $time) {
        $auto_rate = $time['approved'] > 0 ? ($time['auto_approved'] / $time['approved']) * 100 : 0;
        
        fputcsv($output, [
            $time['hour'] . ':00',
            $time['total_bookings'],
            $time['approved'],
            $time['auto_approved'],
            round($auto_rate, 2)
        ]);
    }
    
    fputcsv($output, []);
    fputcsv($output, []);
    
    // ========================================
    // SECTION 7: USER BEHAVIOR ANALYSIS
    // ========================================
    fputcsv($output, ['=== TOP USERS (BY BOOKING ACTIVITY) ===']);
    fputcsv($output, []);
    
    $user_query = "
        SELECT 
            u.id,
            u.full_name,
            u.email,
            COUNT(fb.id) as total_bookings,
            SUM(CASE WHEN fb.status IN ('approved', 'completed') THEN 1 ELSE 0 END) as approved,
            SUM(CASE WHEN fb.status IN ('approved', 'completed') AND fb.admin_notes LIKE '%Auto-approved%' THEN 1 ELSE 0 END) as auto_approved,
            AVG(CASE WHEN fb.status = 'completed' THEN fb.satisfaction_rating ELSE NULL END) as avg_satisfaction
        FROM users u
        INNER JOIN facility_bookings fb ON u.id = fb.user_id
        WHERE fb.created_at >= DATE_SUB(NOW(), INTERVAL 30 DAY)
        AND u.role = 'resident'
        GROUP BY u.id, u.full_name, u.email
        ORDER BY total_bookings DESC
        LIMIT 20
    ";
    
    $stmt = $conn->prepare($user_query);
    $stmt->execute();
    $users = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
    fputcsv($output, [
        'User ID',
        'Full Name',
        'Email',
        'Total Bookings',
        'Approved',
        'Auto-Approved',
        'Auto-Approval Rate (%)',
        'Avg Satisfaction'
    ]);
    
    foreach ($users as $user) {
        $auto_rate = $user['approved'] > 0 ? ($user['auto_approved'] / $user['approved']) * 100 : 0;
        $satisfaction = $user['avg_satisfaction'] > 0 ? round($user['avg_satisfaction'], 2) : 'N/A';
        
        fputcsv($output, [
            $user['id'],
            $user['full_name'],
            $user['email'],
            $user['total_bookings'],
            $user['approved'],
            $user['auto_approved'],
            round($auto_rate, 2),
            $satisfaction
        ]);
    }
    
    fputcsv($output, []);
    fputcsv($output, []);
    
    // ========================================
    // SECTION 8: RECOMMENDATIONS & INSIGHTS
    // ========================================
    fputcsv($output, ['=== AI RECOMMENDATIONS & INSIGHTS ===']);
    fputcsv($output, []);
    
    $recommendations = [];
    
    if ($auto_approval_rate >= 75) {
        $recommendations[] = ['Performance Status', 'EXCELLENT - System operating at peak efficiency'];
        $recommendations[] = ['Recommendation', 'Maintain current ML model parameters and continue monitoring'];
    } elseif ($auto_approval_rate >= 50) {
        $recommendations[] = ['Performance Status', 'GOOD - System performing well'];
        $recommendations[] = ['Recommendation', 'Consider reviewing edge cases to improve auto-approval rate'];
    } elseif ($auto_approval_rate >= 25) {
        $recommendations[] = ['Performance Status', 'FAIR - Room for improvement'];
        $recommendations[] = ['Recommendation', 'Model retraining recommended with additional data'];
        $recommendations[] = ['Action Item', 'Review manual approval patterns to identify improvement opportunities'];
    } else {
        $recommendations[] = ['Performance Status', 'NEEDS IMPROVEMENT - Critical attention required'];
        $recommendations[] = ['Recommendation', 'URGENT: Model retraining required immediately'];
        $recommendations[] = ['Action Item', 'Consider adjusting confidence thresholds'];
        $recommendations[] = ['Action Item', 'Review and expand training dataset'];
    }
    
    $recommendations[] = [];
    $recommendations[] = ['Metric', 'Assessment'];
    $recommendations[] = ['Auto-Approval Rate', round($auto_approval_rate, 2) . '%'];
    $recommendations[] = ['ML Efficiency Score', round(($bookings['auto_approved'] / max($bookings['total_approved'], 1)) * 100, 2) . '%'];
    $recommendations[] = ['Average Confidence', round($summary['avg_confidence'] * 100, 2) . '%'];
    $recommendations[] = ['Total Time Saved', $time_saved_hours . ' hours (' . round($time_saved_hours / 8, 1) . ' working days)'];
    $recommendations[] = ['Admin Reviews Automated', number_format($bookings['auto_approved']) . ' bookings'];
    
    foreach ($recommendations as $rec) {
        fputcsv($output, $rec);
    }
    
    fputcsv($output, []);
    fputcsv($output, []);
    
    // ========================================
    // SECTION 9: REPORT METADATA
    // ========================================
    fputcsv($output, ['=== REPORT METADATA ===']);
    fputcsv($output, ['Report Generated', date('Y-m-d H:i:s')]);
    fputcsv($output, ['Generated By', $_SESSION['full_name'] . ' (' . $_SESSION['email'] . ')']);
    fputcsv($output, ['Report Period', 'Last 30 Days']);
    fputcsv($output, ['Report Type', 'ML Performance Analysis']);
    fputcsv($output, ['System Version', '1.0.0']);
    fputcsv($output, ['Barangay', 'Kapasigan Resource Management System']);
    
    fclose($output);
    exit();
    
} catch (Exception $e) {
    error_log("Export ML Report Error: " . $e->getMessage());
    
    // Clear any output
    if (ob_get_length()) ob_clean();
    
    // Send error response
    header('Content-Type: application/json');
    echo json_encode([
        'success' => false,
        'error' => 'Failed to export ML performance report: ' . $e->getMessage()
    ]);
    exit();
}
?>